Metadata-Version: 2.1
Name: web-reader
Version: 0.1.0
Summary: A natural language screen reader for web content
Home-page: https://github.com/yourusername/web-reader
Author: Your Name
Author-email: your.email@example.com
License: UNKNOWN
Keywords: screen reader,accessibility,web,nlp
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Internet :: WWW/HTTP :: Browsers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# Web Reader

A natural language screen reader that helps users navigate and understand web content through conversation.

## Features

- Natural language commands for web navigation
- Page content reading with smart content extraction
- Element navigation and interaction
- Landmark and heading discovery
- Accessibility-focused design
- Support for ARIA roles and HTML5 semantic elements

## Installation

1. Ensure you have Python 3.10 or later installed
2. Install Ollama and the llama3.2 model:
   ```bash
   # Install Ollama (instructions vary by OS)
   curl -fsSL https://ollama.com/install.sh | sh
   
   # Pull the model
   ollama pull llama3.2
   ```

3. Install the package:
   ```bash
   pip install -e .
   ```

## Usage

Start the screen reader:
```bash
web-reader
```

### Available Commands

- **Navigation**
  - "Go to example.com"
  - "Open website.com"
  - "Visit page.com"

- **Reading**
  - "Read the page"
  - "What does it say?"
  - "Read this section"

- **Element Navigation**
  - "Next element"
  - "Previous element"
  - "Go to main content"
  - "Jump to navigation"

- **Interaction**
  - "Click the login button"
  - "Press submit"
  - "Select the menu"

- **Discovery**
  - "List landmarks"
  - "Show headings"
  - "Find text about pricing"

### Examples

```
What would you like me to do? go to nytimes.com
Navigated to https://nytimes.com. Would you like me to read the page content?

What would you like me to do? list landmarks
Found these landmarks and sections:
heading 1: Today's Paper
nav: Sections
main: Main content
...

What would you like me to do? go to main content
Moved to main content section. Content preview:
[Preview of main content]

What would you like me to do? read section
[Reads current section content]
```

## Architecture

The application is built with a modular design that separates concerns into distinct components:

- **Actions**: Individual commands that can be performed (navigation, reading, etc.)
- **State Management**: Tracks the current state of navigation and interaction
- **Browser Control**: Manages the headless browser instance
- **Natural Language Processing**: Interprets user commands and selects appropriate actions

## Development

### Project Structure

```
web-reader/
├── src/
│   ├── actions/
│   │   ├── __init__.py
│   │   ├── navigation.py
│   │   ├── reading.py
│   │   ├── interaction.py
│   │   └── landmarks.py
│   ├── utils/
│   │   ├── errors.py
│   │   └── logging.py
│   ├── browser.py
│   ├── config.py
│   ├── main.py
│   └── state.py
├── setup.py
└── README.md
```

### Adding New Actions

1. Create a new action function in the appropriate module under `src/actions/`
2. Use the `@register_action` decorator to register it
3. Add the action name to `VALID_ACTIONS` in `config.py`
4. Update the action prompt in `actions/__init__.py` to include the new command

Example:
```python
from ..state import State
from . import register_action

@register_action("my_action")
def my_action(state: State) -> dict:
    """Implement your action here"""
    return {
        "messages": [{"role": "assistant", "content": "Action result"}],
        "next": END
    }
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.


